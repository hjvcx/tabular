#!/usr/bin/python3
'''
Usage:
    tabular [options] [<input> [<output>]]

Options:
    -o <style>, --output-style <style>          Defines style for columns. [default: uhC]
    -i <string>, --input-separator <string>     Defines characters being used as separators. [default:  ]
    -s, --sticky-separators                     Multiple separators as one. [default: True]
    -t, --trim-empty                            Deletes empty fields at beginning and end of entries. 
    -n <string>, --names <string>               Defines names of columns (first character of string stands as separator). 
    -1, --first-line-header                     If enabled, makes first string perceived as header.
    -f <string>, --fields <string>              Defines specification of output. [default: l0]
    -L <number>, --lines-inspect <number>       Defines number of strings being counted before calculating field sizes. [default: 0]
    -h, --help                                  Open this message.
    -v, --version                               Version check and finish program execution.
'''

from docopt import docopt
import pprint
import sys
import re

# Pretty print function
def pretty_printer(data):
    pp = pprint.PrettyPrinter(stream=sys.stderr)
    pp.pprint(data)

def get_unique_characters(input_string):
    return ''.join(sorted(set(input_string), key=input_string.index))

def perr(message, exception=None):
       if exception:
           msg = f'{message}: {exception}'
       else:
           msg = message
       print(msg, file=sys.stderr)

def arg_parse():
    # Getting parameters and options dictionary then print it (for understanding)
    args = docopt(__doc__)
    pretty_printer(args)
    exit_trigger = False

    # Working with options and parameters using conditions   
    if args['--output-style']:
        pattern = r'^[au]?[hH]?[cC]?[bB]?$'
        matches = re.findall(pattern, args['--output-style'])
        if not matches:
            print(f'Invalid argument in option: --output-style. Example of correct use: --output-style uhC', file=sys.stderr)
            exit_trigger = True

    if args['--fields']:
        pattern = r'^([lrjc]\d+)+$'
        matches = re.findall(pattern, args['--fields'])
        if not matches:
            print(f'Invalid argument in option: --fields. Example of correct use: --fields l12r3', file=sys.stderr)
            exit_trigger = True

    if args['--lines-inspect']:
        pattern = r'^\d+$'
        matches = re.findall(pattern, args['--lines-inspect'])
        if not matches:
            print(f'Invalid argument in option: --lines-inspect. Example of correct use: --lines-inspect 15', file=sys.stderr)
            exit_trigger = True

    if args['--version']:
        print('tabular v0.0.1')
        sys.exit()

    if exit_trigger:
        sys.exit(1)
        
    try:
        if args['<input>']:
            input_stream = open(args['<input>'])
        else:
            input_stream = sys.stdin
            print('Press Ctrl+D to finish entering data.')
            input_data = input_stream.readlines()
    except Exception as e:
        perr('Cannot open input', e)
        sys.exit(1)
    

    try:
        if args['<output>']:
            output_stream = open(args['<output>'], 'w+')
        else:
            output_stream = sys.stdout
    except Exception as e:
        perr('Cannot write output', e)
        sys.exit(1)
    # output_stream.write(input_data)

    if args['<input>']:
        while True:
            line = input_stream.readline()
            if not line:
                break 
            # Process...
            output_stream.write(line)
    else:
        for line in input_data:
            # Process...
            output_stream.write(line)
    
    input_stream.close()
    output_stream.close()

def main():
    arg_parse()
   
main()